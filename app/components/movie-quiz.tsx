"use client"

import { useState, type Dispatch, type SetStateAction } from "react"
import { X, Brain, ArrowRight, ArrowLeft, Search } from "lucide-react"

const recommendedMovies = [
  {
    id: 101,
    title: "–ù–∞—á–∞–ª–æ",
    image: "https://i.pinimg.com/originals/61/81/52/618152b971ff5b62749da0fb08d8de37.jpg",
    year: 2010,
    rating: 8.8,
    genres: ["–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–ë–æ–µ–≤–∏–∫", "–¢—Ä–∏–ª–ª–µ—Ä"],
  }
]

const surveyQuestions = [
  {
    id: "country",
    question: "–ö–∞–∫–∞—è –∏–∑ —Å—Ç—Ä–∞–Ω-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å–µ—Ä–∏–∞–ª–æ–≤ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Å–æ–±–æ–µ –º–µ—Å—Ç–æ –≤ –í–∞—à–µ–º —Å–µ—Ä–¥—Ü–µ?",
    options: [
      { value: "AE", label: "–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –ê—Ä–∞–±—Å–∫–∏–µ –≠–º–∏—Ä–∞—Ç—ã" },
      { value: "AR", label: "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞" },
      { value: "AT", label: "–ê–≤—Å—Ç—Ä–∏—è" },
      { value: "AU", label: "–ê–≤—Å—Ç—Ä–∞–ª–∏—è" },
      { value: "BE", label: "–ë–µ–ª—å–≥–∏—è" },
      { value: "BR", label: "–ë—Ä–∞–∑–∏–ª–∏—è" },
      { value: "BY", label: "–ë–µ–ª–∞—Ä—É—Å—å" },
      { value: "CA", label: "–ö–∞–Ω–∞–¥–∞" },
      { value: "CH", label: "–®–≤–µ–π—Ü–∞—Ä–∏—è" },
      { value: "CL", label: "–ß–∏–ª–∏" },
      { value: "CN", label: "–ö–∏—Ç–∞–π" },
      { value: "CO", label: "–ö–æ–ª—É–º–±–∏—è" },
      { value: "CZ", label: "–ß–µ—Ö–∏—è" },
      { value: "DE", label: "–ì–µ—Ä–º–∞–Ω–∏—è" },
      { value: "DK", label: "–î–∞–Ω–∏—è" },
      { value: "EG", label: "–ï–≥–∏–ø–µ—Ç" },
      { value: "ES", label: "–ò—Å–ø–∞–Ω–∏—è" },
      { value: "FI", label: "–§–∏–Ω–ª—è–Ω–¥–∏—è" },
      { value: "FR", label: "–§—Ä–∞–Ω—Ü–∏—è" },
      { value: "GB", label: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è" },
      { value: "GT", label: "–ì–≤–∞—Ç–µ–º–∞–ª–∞" },
      { value: "HK", label: "–ì–æ–Ω–∫–æ–Ω–≥" },
      { value: "HU", label: "–í–µ–Ω–≥—Ä–∏—è" },
      { value: "ID", label: "–ò–Ω–¥–æ–Ω–µ–∑–∏—è" },
      { value: "IE", label: "–ò—Ä–ª–∞–Ω–¥–∏—è" },
      { value: "IL", label: "–ò–∑—Ä–∞–∏–ª—å" },
      { value: "IN", label: "–ò–Ω–¥–∏—è" },
      { value: "IO", label: "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∞—è –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤ –ò–Ω–¥–∏–π—Å–∫–æ–º –û–∫–µ–∞–Ω–µ" },
      { value: "IS", label: "–ò—Å–ª–∞–Ω–¥–∏—è" },
      { value: "IT", label: "–ò—Ç–∞–ª–∏—è" },
      { value: "JO", label: "–ò–æ—Ä–¥–∞–Ω–∏—è" },
      { value: "JP", label: "–Ø–ø–æ–Ω–∏—è" },
      { value: "KE", label: "–ö–µ–Ω–∏—è" },
      { value: "KN", label: "–°–µ–Ω—Ç-–ö–∏—Ç—Å –∏ –ù–µ–≤–∏—Å" },
      { value: "KR", label: "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–æ—Ä–µ—è" },
      { value: "KW", label: "–ö—É–≤–µ–π—Ç" },
      { value: "LB", label: "–õ–∏–≤–∞–Ω" },
      { value: "LU", label: "–õ—é–∫—Å–µ–º–±—É—Ä–≥" },
      { value: "MA", label: "–ú–∞—Ä–æ–∫–∫–æ" },
      { value: "MX", label: "–ú–µ–∫—Å–∏–∫–∞" },
      { value: "MY", label: "–ú–∞–ª–∞–π–∑–∏—è" },
      { value: "NC", label: "–ù–æ–≤–∞—è –ö–∞–ª–µ–¥–æ–Ω–∏—è" },
      { value: "NG", label: "–ù–∏–≥–µ—Ä–∏—è" },
      { value: "NL", label: "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã" },
      { value: "NO", label: "–ù–æ—Ä–≤–µ–≥–∏—è" },
      { value: "NZ", label: "–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è" },
      { value: "PE", label: "–ü–µ—Ä—É" },
      { value: "PH", label: "–§–∏–ª–∏–ø–ø–∏–Ω—ã" },
      { value: "PL", label: "–ü–æ–ª—å—à–∞" },
      { value: "PR", label: "–ü—É—ç—Ä—Ç–æ-–†–∏–∫–æ" },
      { value: "PT", label: "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è" },
      { value: "RO", label: "–†—É–º—ã–Ω–∏—è" },
      { value: "RU", label: "–†–æ—Å—Å–∏—è" },
      { value: "SA", label: "–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è" },
      { value: "SE", label: "–®–≤–µ—Ü–∏—è" },
      { value: "SG", label: "–°–∏–Ω–≥–∞–ø—É—Ä" },
      { value: "SN", label: "–°–µ–Ω–µ–≥–∞–ª" },
      { value: "SY", label: "–°–∏—Ä–∏—è" },
      { value: "TH", label: "–¢–∞–∏–ª–∞–Ω–¥" },
      { value: "TN", label: "–¢—É–Ω–∏—Å" },
      { value: "TR", label: "–¢—É—Ä—Ü–∏—è" },
      { value: "TW", label: "–ö–∏—Ç–∞–π—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞" },
      { value: "UA", label: "–£–∫—Ä–∞–∏–Ω–∞" },
      { value: "US", label: "–°–æ–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –®—Ç–∞—Ç—ã –ê–º–µ—Ä–∏–∫–∏" },
      { value: "UY", label: "–£—Ä—É–≥–≤–∞–π" },
      { value: "VN", label: "–í—å–µ—Ç–Ω–∞–º" },
      { value: "ZA", label: "–Æ–∂–Ω–æ-–ê—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞" },
      { value: "ZM", label: "–ó–∞–º–±–∏—è" },
    ],
  },
  {
    id: "mood",
    question: "–°–µ—Ä–∏–∞–ª —Å –∫–∞–∫–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º —Å–µ–π—á–∞—Å –í–∞–º –ø–æ –¥—É—à–µ?",
    options: [
      { value: "happy", label: "üòä –≤–µ—Å–µ–ª–æ–µ" },
      { value: "sad", label: "üò¢ –≥—Ä—É—Å—Ç–Ω–æ–µ" },
      { value: "melancholic", label: "üòî –º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ–µ" },
      { value: "positive", label: "üåû –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ" },
      { value: "touching", label: "üíñ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ" },
      { value: "joyful", label: "üéâ —Ä–∞–¥–æ—Å—Ç–Ω–æ–µ" },
      { value: "relaxing", label: "üòå —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–µ–µ" },
      { value: "exciting", label: "ü§© –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ" },
    ],
  },
  {
    id: "company",
    question: "–° –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–π—á–∞—Å —Å–µ—Ä–∏–∞–ª?",
    options: [
      { value: "alone", label: "üë§ –æ–¥–∏–Ω" },
      { value: "friends", label: "üë• —Å –¥—Ä—É–∑—å—è–º–∏" },
      { value: "family", label: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ —Å —Å–µ–º—å—ë–π" },
      { value: "children", label: "üë∂ —Å –¥–µ—Ç—å–º–∏" },
    ],
  },
]

interface MovieQuizProps {
  onOpenSurvey: () => void
  surveyResults: any[] | null
  setSurveyResults: Dispatch<SetStateAction<any[] | null>>
  showSurveyModal: boolean
  setShowSurveyModal: Dispatch<SetStateAction<boolean>>
}

export default function MovieQuiz({
  onOpenSurvey,
  surveyResults,
  setSurveyResults,
  showSurveyModal,
  setShowSurveyModal,
}: MovieQuizProps) {
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [answers, setAnswers] = useState<Record<string, string>>({})
  const [showResults, setShowResults] = useState(false)
  const [searchQuery, setSearchQuery] = useState("")

  const handleAnswer = (questionId: string, answer: string) => {
    setAnswers((prev) => ({
      ...prev,
      [questionId]: answer,
    }))
  }

  const nextQuestion = () => {
    if (currentQuestion < surveyQuestions.length - 1) {
      setCurrentQuestion((prev) => prev + 1)
    } else {
      setSurveyResults(recommendedMovies.length > 0 ? [recommendedMovies[0]] : [])
      setShowSurveyModal(false)
      setShowResults(true)
      setCurrentQuestion(0)
      console.log("Survey answers:", answers)
    }
  }

  const prevQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion((prev) => prev - 1)
    }
  }

  const resetSurvey = () => {
    setSurveyResults(null)
    setAnswers({})
    setShowResults(false)
    setCurrentQuestion(0)
  }

  return (
    <>
      <div className="rounded-xl bg-gray-800/50 p-8 shadow-2xl backdrop-blur-sm">
        <div className="flex items-center space-x-3 mb-6">
          <Brain className="h-8 w-8 text-purple-500" />
          <h2 className="text-2xl font-bold">–ü–æ–¥–±–æ—Ä —Å–µ—Ä–∏–∞–ª–∞ –ø–æ –≤–∫—É—Å—É</h2>
        </div>

        <div>
          <p className="text-gray-400 mb-6">
            –ù–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å? –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ –º—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–µ—Ä–∏–∞–ª—ã, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—à–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.
          </p>

          <button
            onClick={onOpenSurvey}
            className="group flex w-full items-center justify-center rounded-lg bg-purple-600 px-4 py-3 font-medium text-white transition-colors hover:bg-purple-500"
          >
            –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å
            <ArrowRight className="ml-2 h-4 w-4 opacity-70 transition-transform group-hover:translate-x-1" />
          </button>
        </div>
      </div>

      {showSurveyModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/70">
          <div className="w-full max-w-xl rounded-xl bg-gray-800 p-6 shadow-2xl overflow-y-auto max-h-[90vh]">
            <button
              onClick={() => {setShowSurveyModal(false)
                resetSurvey()
              }}
              className="absolute right-4 top-4 p-1 rounded-full hover:bg-gray-700 transition-colors"
            >
              <X className="h-5 w-5" />
            </button>

            <div className="mb-6">
              <h3 className="text-xl font-bold mb-1">–ü–æ–¥–±–æ—Ä —Å–µ—Ä–∏–∞–ª–∞</h3>
              <p className="text-gray-400 text-sm">
                –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {surveyQuestions.length}
              </p>
            </div>

            <div className="mb-6">
              <h4 className="text-lg font-medium mb-4">{surveyQuestions[currentQuestion].question}</h4>

              {surveyQuestions[currentQuestion].id === "country" ? (
                <div className="space-y-3">
                  <div className="relative mb-4">
                    <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                      <Search className="h-4 w-4 text-gray-400" />
                    </div>
                    <input
                      type="text"
                      className="bg-gray-700 text-white placeholder-gray-400 border-none rounded-lg block w-full pl-10 p-2.5 focus:ring-2 focus:ring-purple-500 focus:outline-none"
                      placeholder="–ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω—ã..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                    />
                  </div>
                  
                  <div className="max-h-64 overflow-y-auto pr-1 space-y-2">
                    {surveyQuestions[currentQuestion].options
                      .filter(option => 
                        searchQuery === "" || 
                        option.label.toLowerCase().includes(searchQuery.toLowerCase())
                      )
                      .map((option) => (
                        <button
                          key={option.value}
                          onClick={() => handleAnswer(surveyQuestions[currentQuestion].id, option.value)}
                          className={`w-full text-left px-4 py-3 rounded-lg transition-colors ${
                            answers[surveyQuestions[currentQuestion].id] === option.value
                              ? "bg-purple-600 text-white"
                              : "bg-gray-700 hover:bg-gray-600 text-gray-200"
                          }`}
                        >
                          {option.label}
                        </button>
                      ))}
                  </div>
                </div>
              ) : (
                <div className="space-y-3">
                  {surveyQuestions[currentQuestion].options.map((option) => (
                    <button
                      key={option.value}
                      onClick={() => handleAnswer(surveyQuestions[currentQuestion].id, option.value)}
                      className={`w-full text-left px-4 py-3 rounded-lg transition-colors ${
                        answers[surveyQuestions[currentQuestion].id] === option.value
                          ? "bg-purple-600 text-white"
                          : "bg-gray-700 hover:bg-gray-600 text-gray-200"
                      }`}
                    >
                      {option.label}
                    </button>
                  ))}
                </div>
              )}
            </div>

            <div className="flex justify-between">
              {currentQuestion > 0 && (
                <button
                  onClick={prevQuestion}
                  className="flex items-center space-x-2 px-6 py-2 rounded-lg bg-gray-700 hover:bg-gray-600 transition-colors"
                >
                  <ArrowLeft className="h-4 w-4 mr-2" />
                  <span>–ù–∞–∑–∞–¥</span>
                </button>
              )}
              <div className={currentQuestion === 0 ? "w-full flex justify-end" : ""}>
                <button
                  onClick={nextQuestion}
                  disabled={!answers[surveyQuestions[currentQuestion].id]}
                  className="flex items-center space-x-2 px-6 py-2 rounded-lg bg-purple-600 hover:bg-purple-500 disabled:bg-gray-700 disabled:text-gray-500 disabled:cursor-not-allowed transition-colors"
                >
                  <span>{currentQuestion === surveyQuestions.length - 1 ? "–ì–æ—Ç–æ–≤–æ" : "–î–∞–ª—å—à–µ"}</span>
                  <ArrowRight className="h-4 w-4" />
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {surveyResults && showResults && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/70">
          <div className="w-full max-w-xl rounded-xl bg-gray-800 p-6 shadow-2xl overflow-y-auto max-h-[90vh]">
            <button
              onClick={() => setShowResults(false)}
              className="absolute right-4 top-4 p-1 rounded-full hover:bg-gray-700 transition-colors"
            >
              <X className="h-5 w-5" />
            </button>

            {surveyResults.length > 0 ? (
              <>
                <div className="mb-4">
                  <h3 className="text-xl font-semibold mb-2">–ò–¥–µ–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –≤–∞—Å</h3>
                  <p className="text-gray-400">–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö, –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º:</p>
                </div>
                
                <div className="flex flex-col">
                  <h2 className="text-2xl font-bold mb-2">{surveyResults[0].title}</h2>
                  
                  <div className="relative w-full mb-4 rounded-lg overflow-hidden">
                    <img 
                      src={surveyResults[0].image} 
                      alt={surveyResults[0].title}
                      className="w-full h-auto object-cover"
                    />
                    <div className="absolute top-2 right-2 bg-black/70 text-yellow-400 font-bold px-2 py-1 rounded text-sm">
                      ‚òÖ {surveyResults[0].rating}
                    </div>
                  </div>
                  
                  <div className="flex flex-wrap gap-2 mb-4">
                    {surveyResults[0].genres.map((genre: string, index: number) => (
                      <span key={index} className="bg-purple-600/30 text-purple-200 px-3 py-1 rounded-full text-sm">
                        {genre}
                      </span>
                    ))}
                  </div>
                  
                  <div className="flex items-center text-gray-400 mb-6">
                    <span className="mr-4">–ì–æ–¥: {surveyResults[0].year}</span>
                    <span>ID: {surveyResults[0].id}</span>
                  </div>
                  
                  <p className="text-gray-300 mb-6">
                    –≠—Ç–æ—Ç –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π —Å–µ—Ä–∏–∞–ª –æ—Ç–ª–∏—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º. 
                    –ù–∞—Å–ª–∞–¥–∏—Ç–µ—Å—å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–∏–Ω–æ, –∫–æ—Ç–æ—Ä–æ–µ –º—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å.
                  </p>
                </div>
              </>
            ) : (
              <p className="text-gray-400">–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.</p>
            )}

            <button
              onClick={resetSurvey}
              className="mt-2 w-full flex items-center justify-center rounded-lg border border-purple-500 px-4 py-3 font-medium text-purple-400 transition-colors hover:bg-purple-500/10"
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        </div>
      )}
    </>
  )
}