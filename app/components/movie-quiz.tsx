"use client"

import { useState, type Dispatch, type SetStateAction } from "react"
import { X, Brain, ArrowRight, ArrowLeft, Loader2 } from "lucide-react"
import { getRecommendationQuiz, saveRecommendationToHistory } from "@/lib/actions/reccomendations"

// –ú–∞–ø–ø–∏–Ω–≥ –∂–∞–Ω—Ä–æ–≤ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
const genreMapping: Record<string, string> = {
  action: "–ë–æ–µ–≤–∏–∫",
  adventure: "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", 
  animation: "–ê–Ω–∏–º–∞—Ü–∏—è",
  comedy: "–ö–æ–º–µ–¥–∏—è",
  crime: "–ö—Ä–∏–º–∏–Ω–∞–ª",
  documentary: "–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π",
  drama: "–î—Ä–∞–º–∞",
  family: "–°–µ–º–µ–π–Ω—ã–π",
  fantasy: "–§—ç–Ω—Ç–µ–∑–∏",
  history: "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π",
  horror: "–£–∂–∞—Å—ã",
  music: "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π",
  mystery: "–ú–∏—Å—Ç–∏–∫–∞",
  romance: "–†–æ–º–∞–Ω—Ç–∏–∫–∞",
  scifi: "–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
  "sci-fi": "–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
  thriller: "–¢—Ä–∏–ª–ª–µ—Ä",
  war: "–í–æ–µ–Ω–Ω—ã–π",
  western: "–í–µ—Å—Ç–µ—Ä–Ω",
  reality: "–†–µ–∞–ª—å–Ω–æ—Å—Ç—å",
  documentation: "–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π",
}


const translateGenre = (genre: string): string => {
  const lowerGenre = genre?.toLowerCase().trim()
  return genreMapping[lowerGenre] || genre
}


const MovieSkeleton = () => (
  <div className="animate-pulse">
    <div className="aspect-[2/3] bg-gray-700 rounded-lg mb-3"></div>
    <div className="space-y-2">
      <div className="h-4 bg-gray-700 rounded w-3/4"></div>
      <div className="h-3 bg-gray-700 rounded w-1/2"></div>
      <div className="flex gap-1">
        <div className="h-3 w-12 bg-gray-700 rounded-full"></div>
        <div className="h-3 w-12 bg-gray-700 rounded-full"></div>
      </div>
    </div>
  </div>
)

const surveyQuestions = [
  {
    id: "genre",
    question: "–ö–∞–∫–æ–π –∂–∞–Ω—Ä —Å–µ—Ä–∏–∞–ª–∞ –≤–∞–º –ø–æ –¥—É—à–µ?",
    options: [
      { value: "action", label: "–ë–æ–µ–≤–∏–∫" },
      { value: "adventure", label: "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è" },
      { value: "animation", label: "–ê–Ω–∏–º–∞—Ü–∏—è" },
      { value: "comedy", label: "–ö–æ–º–µ–¥–∏—è" },
      { value: "crime", label: "–ö—Ä–∏–º–∏–Ω–∞–ª" },
      { value: "documentary", label: "–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π" },
      { value: "drama", label: "–î—Ä–∞–º–∞" },
      { value: "family", label: "–°–µ–º–µ–π–Ω—ã–π" },
      { value: "fantasy", label: "–§—ç–Ω—Ç–µ–∑–∏" },
      { value: "history", label: "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π" },
      { value: "horror", label: "–£–∂–∞—Å—ã" },
      { value: "music", label: "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π" },
      { value: "mystery", label: "–ú–∏—Å—Ç–∏–∫–∞" },
      { value: "romance", label: "–†–æ–º–∞–Ω—Ç–∏–∫–∞" },
      { value: "scifi", label: "–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞" },
      { value: "thriller", label: "–¢—Ä–∏–ª–ª–µ—Ä" },
      { value: "war", label: "–í–æ–µ–Ω–Ω—ã–π" },
      { value: "western", label: "–í–µ—Å—Ç–µ—Ä–Ω" },
    ],
  },
  {
    id: "year",
    question: "–í –∫–∞–∫–æ–º –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏–∏ –±—ã–ª –≤—ã–ø—É—â–µ–Ω —Å–µ—Ä–∏–∞–ª?",
    options: [
      { value: "1990-–µ", label: "1990-–µ –≥–æ–¥—ã" },
      { value: "2000-–µ", label: "2000-–µ –≥–æ–¥—ã" },
      { value: "2010-–µ", label: "2010-–µ –≥–æ–¥—ã" },
      { value: "2020-–µ", label: "2020-–µ –≥–æ–¥—ã" },
      { value: "any", label: "–õ—é–±–æ–µ –≤—Ä–µ–º—è" },
    ],
  },
  {
    id: "duration",
    question: "–ö–∞–∫–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–ø–∏–∑–æ–¥–∞ –≤–∞–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞?",
    options: [
      { value: "–¥–æ 60", label: "–î–æ 60 –º–∏–Ω—É—Ç" },
      { value: "60-120", label: "60-120 –º–∏–Ω—É—Ç" },
      { value: "120-180", label: "120-180 –º–∏–Ω—É—Ç" },
      { value: "180-210", label: "180-210 –º–∏–Ω—É—Ç" },
      { value: "any", label: "–õ—é–±–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" },
    ],
  },
  {
    id: "country",
    question: "–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞?",
    options: [
      { value: "US", label: "–°–®–ê" },
      { value: "UK", label: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è" },
      { value: "CA", label: "–ö–∞–Ω–∞–¥–∞" },
      { value: "AU", label: "–ê–≤—Å—Ç—Ä–∞–ª–∏—è" },
      { value: "DE", label: "–ì–µ—Ä–º–∞–Ω–∏—è" },
      { value: "FR", label: "–§—Ä–∞–Ω—Ü–∏—è" },
      { value: "JP", label: "–Ø–ø–æ–Ω–∏—è" },
      { value: "KR", label: "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è" },
      { value: "RU", label: "–†–æ—Å—Å–∏—è" },
      { value: "any", label: "–õ—é–±–∞—è —Å—Ç—Ä–∞–Ω–∞" },
    ],
  },
  {
    id: "age",
    question: "–ö–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
    options: [
      { value: "g", label: "G - –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤" },
      { value: "tv-g", label: "TV-G - –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ (–¢–í)" },
      { value: "tv-y", label: "TV-Y - –¥–ª—è –¥–µ—Ç–µ–π" },
      { value: "tv-y7", label: "TV-Y7 - –¥–ª—è –¥–µ—Ç–µ–π –æ—Ç 7 –ª–µ—Ç" },
      { value: "pg", label: "PG - –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π" },
      { value: "tv-pg", label: "TV-PG - –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π (–¢–í)" },
      { value: "tv-14", label: "TV-14 - –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤ –æ—Ç 14 –ª–µ—Ç" },
      { value: "r", label: "R - —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏" },
      { value: "tv-ma", label: "TV-MA - —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö" },
      { value: "any", label: "–õ—é–±–æ–π —Ä–µ–π—Ç–∏–Ω–≥" },
    ],
  },
  {
    id: "mood",
    question: "–°–µ—Ä–∏–∞–ª —Å –∫–∞–∫–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º —Å–µ–π—á–∞—Å –≤–∞–º –ø–æ –¥—É—à–µ?",
    options: [
      { value: "–≤–µ—Å–µ–ª–æ–µ", label: "üòä –í–µ—Å–µ–ª–æ–µ" },
      { value: "–≥—Ä—É—Å—Ç–Ω–æ–µ", label: "üò¢ –ì—Ä—É—Å—Ç–Ω–æ–µ" },
      { value: "–ø–µ—á–∞–ª—å–Ω–æ–µ", label: "üòû –ü–µ—á–∞–ª—å–Ω–æ–µ" },
      { value: "–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ–µ", label: "üòî –ú–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ–µ" },
      { value: "–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ", label: "üåû –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ" },
      { value: "—Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ", label: "üíñ –¢—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ" },
      { value: "—Ä–∞–¥–æ—Å—Ç–Ω–æ–µ", label: "üéâ –†–∞–¥–æ—Å—Ç–Ω–æ–µ" },
      { value: "—Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–µ–µ", label: "üòå –†–∞—Å—Å–ª–∞–±–ª—è—é—â–µ–µ" },
      { value: "–∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ", label: "ü§© –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ" },
      { value: "any", label: "–õ—é–±–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ" },
    ],
  },
  {
    id: "company",
    question: "–° –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∞–ª?",
    options: [
      { value: "–æ–¥–∏–Ω", label: "üë§ –û–¥–∏–Ω" },
      { value: "—Å –¥—Ä—É–∑—å—è–º–∏", label: "üë• –° –¥—Ä—É–∑—å—è–º–∏" },
      { value: "—Å —Å–µ–º—å—ë–π", label: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –° —Å–µ–º—å—ë–π" },
      { value: "—Å –¥–µ—Ç—å–º–∏", label: "üë∂ –° –¥–µ—Ç—å–º–∏" },
      { value: "any", label: "–õ—é–±–∞—è –∫–æ–º–ø–∞–Ω–∏—è" },
    ],
  },
]

interface MovieQuizProps {
  onOpenSurvey: () => void
  surveyResults: any[] | null
  setSurveyResults: Dispatch<SetStateAction<any[] | null>>
  showSurveyModal: boolean
  setShowSurveyModal: Dispatch<SetStateAction<boolean>>
}

export default function MovieQuiz({
  onOpenSurvey,
  surveyResults,
  setSurveyResults,
  showSurveyModal,
  setShowSurveyModal,
}: MovieQuizProps) {
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [answers, setAnswers] = useState<Record<string, string>>({})
  const [showResults, setShowResults] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [expandedDescription, setExpandedDescription] = useState<number | null>(null)

  const handleAnswer = (questionId: string, answer: string) => {
    setAnswers((prev) => ({
      ...prev,
      [questionId]: answer,
    }))
  }

  const nextQuestion = async () => {
    if (currentQuestion < surveyQuestions.length - 1) {
      setCurrentQuestion((prev) => prev + 1)
    } else {
      setIsLoading(true)
      try {
        const quizData = Object.entries(answers).map(([id, option]) => ({
          id,
          option
        }));

        const result = await getRecommendationQuiz(quizData);
        
        if (result.success && result.recommendation) {
          setSurveyResults(result.recommendation);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∏–ª—å–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
          for (const movie of result.recommendation) {
            await saveRecommendationToHistory(movie);
          }
        }
        setShowSurveyModal(false);
        setShowResults(true);
        setCurrentQuestion(0);
      } catch (error) {
        console.error("Error getting recommendation:", error);
        setShowSurveyModal(false);
        setShowResults(true);
        setCurrentQuestion(0);
      } finally {
        setIsLoading(false)
      }
    }
  }

  const prevQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion((prev) => prev - 1)
    }
  }

  const resetSurvey = () => {
    setSurveyResults(null)
    setAnswers({})
    setShowResults(false)
    setCurrentQuestion(0)
  }

  const handleMovieClick = (movieIndex: number) => {
    setExpandedDescription(expandedDescription === movieIndex ? null : movieIndex)
  }

  return (
    <>
      <div className="rounded-xl bg-gray-800/50 p-8 shadow-2xl backdrop-blur-sm">
        <div className="flex items-center space-x-3 mb-6">
          <Brain className="h-8 w-8 text-purple-500" />
          <h2 className="text-2xl font-bold">–ü–æ–¥–±–æ—Ä —Å–µ—Ä–∏–∞–ª–∞ –ø–æ –≤–∫—É—Å—É</h2>
        </div>

        <div>
          <p className="text-gray-400 mb-6">
            –ù–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å? –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ –º—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–µ—Ä–∏–∞–ª—ã, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—à–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.
          </p>

          <button
            onClick={onOpenSurvey}
            className="group flex w-full items-center justify-center rounded-lg bg-purple-600 px-4 py-3 font-medium text-white transition-colors hover:bg-purple-500"
          >
            –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å
            <ArrowRight className="ml-2 h-4 w-4 opacity-70 transition-transform group-hover:translate-x-1" />
          </button>
        </div>
      </div>

      {showSurveyModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/70">
          <div className="w-full max-w-xl rounded-xl bg-gray-800 p-6 shadow-2xl overflow-y-auto max-h-[90vh]">
            <button
              onClick={() => {setShowSurveyModal(false)
                resetSurvey()
              }}
              className="absolute right-4 top-4 p-1 rounded-full hover:bg-gray-700 transition-colors"
            >
              <X className="h-5 w-5" />
            </button>

            {isLoading ? (
              <div className="flex flex-col items-center justify-center py-12">
                <Loader2 className="h-12 w-12 animate-spin text-purple-500 mb-4" />
                <h3 className="text-xl font-bold mb-2">–ü–æ–¥–±–∏—Ä–∞–µ–º —Å–µ—Ä–∏–∞–ª—ã –¥–ª—è –≤–∞—Å</h3>
                <p className="text-gray-400 text-center">
                  –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –∏—â–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...
                </p>
              </div>
            ) : (
              <>
                <div className="mb-6">
                  <h3 className="text-xl font-bold mb-1">–ü–æ–¥–±–æ—Ä —Å–µ—Ä–∏–∞–ª–∞</h3>
                  <p className="text-gray-400 text-sm">
                    –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {surveyQuestions.length}
                  </p>
                </div>

                <div className="mb-6">
                  <h4 className="text-lg font-medium mb-4">{surveyQuestions[currentQuestion].question}</h4>

                  <div className="space-y-3">
                    {surveyQuestions[currentQuestion].options.map((option) => (
                      <button
                        key={option.value}
                        onClick={() => handleAnswer(surveyQuestions[currentQuestion].id, option.value)}
                        className={`w-full text-left px-4 py-3 rounded-lg transition-colors ${
                          answers[surveyQuestions[currentQuestion].id] === option.value
                            ? "bg-purple-600 text-white"
                            : "bg-gray-700 hover:bg-gray-600 text-gray-200"
                        }`}
                      >
                        {option.label}
                      </button>
                    ))}
                  </div>
                </div>

                <div className="flex justify-between">
                  {currentQuestion > 0 && (
                    <button
                      onClick={prevQuestion}
                      className="flex items-center space-x-2 px-6 py-2 rounded-lg bg-gray-700 hover:bg-gray-600 transition-colors"
                    >
                      <ArrowLeft className="h-4 w-4 mr-2" />
                      <span>–ù–∞–∑–∞–¥</span>
                    </button>
                  )}
                  <div className={currentQuestion === 0 ? "w-full flex justify-end" : ""}>
                    <button
                      onClick={nextQuestion}
                      disabled={!answers[surveyQuestions[currentQuestion].id]}
                      className="flex items-center space-x-2 px-6 py-2 rounded-lg bg-purple-600 hover:bg-purple-500 disabled:bg-gray-700 disabled:text-gray-500 disabled:cursor-not-allowed transition-colors"
                    >
                      <span>{currentQuestion === surveyQuestions.length - 1 ? "–ì–æ—Ç–æ–≤–æ" : "–î–∞–ª—å—à–µ"}</span>
                      <ArrowRight className="h-4 w-4" />
                    </button>
                  </div>
                </div>
              </>
            )}
          </div>
        </div>
      )}

      {surveyResults && showResults && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/70">
          <div className="w-full max-w-6xl rounded-xl bg-gray-800 p-6 shadow-2xl overflow-y-auto max-h-[90vh]">
            <button
              onClick={() => setShowResults(false)}
              className="absolute right-4 top-4 p-1 rounded-full hover:bg-gray-700 transition-colors z-10"
            >
              <X className="h-5 w-5" />
            </button>

            {isLoading ? (
              <div className="space-y-6">
                <div className="mb-6">
                  <h3 className="text-xl font-semibold mb-2">–ü–æ–¥–±–∏—Ä–∞–µ–º —Å–µ—Ä–∏–∞–ª—ã –¥–ª—è –≤–∞—Å</h3>
                  <p className="text-gray-400">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è...</p>
                </div>
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
                  {[1, 2, 3, 4, 5].map((i) => (
                    <MovieSkeleton key={i} />
                  ))}
                </div>
              </div>
            ) : surveyResults.length > 0 ? (
              <>
                <div className="mb-6">
                  <h3 className="text-xl font-semibold mb-2">–ò–¥–µ–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –≤–∞—Å</h3>
                  <p className="text-gray-400">–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö, –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º:</p>
                </div>
                
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 mb-6">
                  {surveyResults.map((movie, index) => (
                    <div 
                      key={index} 
                      className="group cursor-pointer"
                      onClick={() => handleMovieClick(index)}
                    >
                      <div className="relative aspect-[2/3] rounded-lg overflow-hidden shadow-lg mb-3 transition-transform duration-300 group-hover:scale-105">
                        <img 
                          src={movie.image} 
                          alt={movie.title}
                          className="w-full h-full object-cover"
                        />
                        <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                        
                        {/* Rating badge */}
                        <div className="absolute top-2 right-2 bg-purple-600/90 px-2 py-1 rounded-full text-xs font-medium backdrop-blur-sm">
                          ‚òÖ {movie.rating}
                        </div>

                        {/* Hover info */}
                        <div className={`absolute bottom-0 left-0 right-0 p-3 transform transition-transform duration-300 ${
                          expandedDescription === index ? 'translate-y-0' : 'translate-y-full group-hover:translate-y-0'
                        }`}>
                          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ */}
                          <div className="absolute inset-0 bg-gradient-to-t from-black/90 via-black/70 to-transparent -z-10"></div>
                          <div className="flex flex-wrap gap-1 mb-2">
                            {movie.genres.slice(0, 2).map((genre: string, genreIndex: number) => (
                              <span key={genreIndex} className="px-2 py-0.5 bg-black/60 backdrop-blur-sm rounded-full text-xs font-medium text-white">
                                {translateGenre(genre)}
                              </span>
                            ))}
                          </div>
                          <p className={`text-xs text-white font-medium leading-relaxed ${
                            expandedDescription === index ? '' : 'line-clamp-2'
                          }`}>
                            {movie.description}
                          </p>
                        </div>
                      </div>

                      <div className="space-y-1">
                        <h3 className="font-semibold text-sm leading-tight line-clamp-2 group-hover:text-purple-400 transition-colors">
                          {movie.title}
                        </h3>
                        <div className="flex items-center space-x-2 text-xs text-gray-400">
                          <span>{movie.year}</span>
                          <span>‚Ä¢</span>
                          <span>{translateGenre(movie.genres[0])}</span>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                
                <p className="text-gray-400 text-sm mb-6">
                  –≠—Ç–∏ —Å–µ—Ä–∏–∞–ª—ã –æ—Ç–ª–∏—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º. 
                  –ù–∞—Å–ª–∞–¥–∏—Ç–µ—Å—å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–∏–Ω–æ, –∫–æ—Ç–æ—Ä–æ–µ –º—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å.
                </p>
              </>
            ) : (
              <p className="text-gray-400">–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.</p>
            )}

            <button
              onClick={resetSurvey}
              className="mt-2 w-full flex items-center justify-center rounded-lg border border-purple-500 px-4 py-3 font-medium text-purple-400 transition-colors hover:bg-purple-500/10"
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        </div>
      )}
    </>
  )
}